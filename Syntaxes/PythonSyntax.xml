<?xml version="1.0"?>
<!--
@description Defines the Python Syntax
@author 	 Matt Jones <m.t.h.jones@gmail.com>
@copyright 	 The MIT License

Copyright (c) 2009

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->
<syntax name="sourcecode.python">
	<!-- 
	Following standards as outlined by elliottcable at:
		 http://wiki.macrabbit.com/forums/viewthread/117/
	-->
	<zones>
		<include collection="language" />
	</zones>
	
	<library>
		<collection name="language">
			<include collection="metadata.processing" />
			<include collection="metadata.comment" />
			<!--<include collection="metadata.type-signature" />-->
			
			<include collection="literal.collection" />
			
			<include collection="container.class" />
			<include collection="container.block" />
			<include collection="container.function" />
			<include collection="container.statement" />
			
			<include collection="identifier.decorator" />
			<include collection="identifier.variable" />
			<include collection="identifier.class" />
			<include collection="identifier.constant" />
			
			<include collection="literal.keyword" />a
			<include collection="literal.string" />
			<include collection="literal.numeric" />
			
			<include collection="delimiter" />
			
			<include collection="keyword" />
			<include collection="identifier.function" />
			<include collection="identifier.type" />
			
			<include collection="operator" />
		</collection>
	    
		<!--  
			============
			  Literals 
			============
		-->
		<collection name="literal.string">
			<!-- 
				This is named as a double quoted (") string even though it matches
				both single and double quoted strings. In Python, any string that is
				not explicitly a raw string (r'') is treated like a single quoted
				string in other languages.
			-->
			<zone name="literal.string.quoted">
				<starts-with>
					<!-- <expression>[uU]?('|")[^\1]+?</expression> -->
					<expression>([uU]?)('|")</expression>
					<capture number="1" name="string.modifier" />
					<capture number="2" name="string.begin" />
				</starts-with>
				<ends-with>
					<expression>(\2)</expression>
					<capture number="1" name="string.end" />
				</ends-with>
				<subzones>
					<include collection="literal.escape" />
				</subzones>
			</zone>
			
			<!-- no heredocs in Python! -->
			<!--<zone name="literal.string.heredoc">
			</zone>-->
			
			<zone name="literal.regex">
				<starts-with>
					<expression>([uU]?[rR])('|")</expression>
					<capture number="1" name="string.modifier" />
					<capture number="2" name="string.begin" />
				</starts-with>
				<ends-with>
					<expression>(\2)</expression>
					<capture number="1" name="string.end" />
				</ends-with>
				<subzones>
					<include syntax="literal.string.format" />
					<include syntax="expression.regex" />
				</subzones>
			</zone>
		</collection>
		
		<collection name="literal.numeric">
			<!-- Python numeric types are waaaaayyy too broad -->
			
			<!-- According to Python spec, +/- signs are not part of the number and should therefore not belong in the numeric specification here. -->
			
			<zone name="literal.numeric.complex.long">
				<!-- decimal long real : integer imag -->
				<expression>\b((\d+[lL])(\s*([+-](\s[+-])?)+\s*)+)\d+[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- decimal long real : float with exponent imag normal -->
				<expression>\b((\d+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- decimal long real : float with exponent imag no integer preceding decimal -->
				<expression>\b((\d+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- decimal long real : float with exponent imag no integer succeeding decimal -->
				<expression>\b((\d+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- decimal long real : float imag normal -->
				<expression>\b((\d+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- decimal long real : float imag no integer preceding decimal -->
				<expression>\b((\d+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- decimal long real : float imag no integer succeeding decimal -->
				<expression>\b((\d+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\d+\.)[jJ]\b</expression>
			</zone>
			
			<zone name="literal.numeric.complex.long">
				<!-- binary long real : integer imag -->
				<expression>\b((0[bB][01]+[lL])(\s*([+-](\s[+-])?)+\s*)+)\d+[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- binary long real : float with exponent imag normal -->
				<expression>\b((0[bB][01]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- binary long real : float with exponent imag no integer preceding decimal -->
				<expression>\b((0[bB][01]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- binary long real : float with exponent imag no integer succeeding decimal -->
				<expression>\b((0[bB][01]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- binary long real : float imag normal -->
				<expression>\b((0[bB][01]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- binary long real : float imag no integer preceding decimal -->
				<expression>\b((0[bB][01]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- binary long real : float imag no integer succeeding decimal -->
				<expression>\b((0[bB][01]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\d+\.)[jJ]\b</expression>
			</zone>
			
			<zone name="literal.numeric.complex.long">
				<!-- octal long real : integer imag -->
				<expression>\b((0[oO]?[0-7]+[lL])(\s*([+-](\s[+-])?)+\s*)+)\d+[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- octal long real : float with exponent imag normal -->
				<expression>\b((0[oO]?[0-7]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- octal long real : float with exponent imag no integer preceding decimal -->
				<expression>\b((0[oO]?[0-7]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- octal long real : float with exponent imag no integer succeeding decimal -->
				<expression>\b((0[oO]?[0-7]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- octal long real : float imag normal -->
				<expression>\b((0[oO]?[0-7]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- octal long real : float imag no integer preceding decimal -->
				<expression>\b((0[oO]?[0-7]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- octal long real : float imag no integer succeeding decimal -->
				<expression>\b((0[oO]?[0-7]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\d+\.)[jJ]\b</expression>
			</zone>
			
			<zone name="literal.numeric.complex.long">
				<!-- hexadecimal long real : integer imag -->
				<expression>\b((0[xX][a-fA-F0-9]+[lL])(\s*([+-](\s[+-])?)+\s*)+)\d+[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- hexadecimal long real : float with exponent imag normal -->
				<expression>\b((0[xX][a-fA-F0-9]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- hexadecimal long real : float with exponent imag no integer preceding decimal -->
				<expression>\b((0[xX][a-fA-F0-9]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- hexadecimal long real : float with exponent imag no integer succeeding decimal -->
				<expression>\b((0[xX][a-fA-F0-9]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- hexadecimal long real : float imag normal -->
				<expression>\b((0[xX][a-fA-F0-9]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- hexadecimal long real : float imag no integer preceding decimal -->
				<expression>\b((0[xX][a-fA-F0-9]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex.long">
				<!-- hexadecimal long real : float imag no integer succeeding decimal -->
				<expression>\b((0[xX][a-fA-F0-9]+[lL])(\s*([+-](\s[+-])?)+\s*)+)(\d+\.)[jJ]\b</expression>
			</zone>
			
			<zone name="literal.numeric.complex">
				<!-- decimal real : integer imag -->
				<expression>\b((\d+)(\s*([+-](\s[+-])?)+\s*)+)?\d+[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- decimal real : float with exponent imag normal -->
				<expression>\b((\d+)(\s*([+-](\s[+-])?)+\s*)+)?(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- decimal real : float with exponent imag no integer preceding decimal -->
				<expression>\b((\d+)(\s*([+-](\s[+-])?)+\s*)+)?(\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- decimal real : float with exponent imag no integer succeeding decimal -->
				<expression>\b((\d+)(\s*([+-](\s[+-])?)+\s*)+)?(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- decimal real : float imag normal -->
				<expression>\b((\d+)(\s*([+-](\s[+-])?)+\s*)+)?(\d+\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- decimal real : float imag no integer preceding decimal -->
				<expression>\b((\d+)(\s*([+-](\s[+-])?)+\s*)+)?(\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- decimal real : float imag no integer succeeding decimal -->
				<expression>\b((\d+)(\s*([+-](\s[+-])?)+\s*)+)?(\d+\.)[jJ]\b</expression>
			</zone>
			
			<zone name="literal.numeric.complex">
				<!-- binary real : integer imag -->
				<expression>\b((0[bB][01]+)(\s*([+-](\s[+-])?)+\s*)+)\d+[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- binary real : float with exponent imag normal -->
				<expression>\b((0[bB][01]+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- binary real : float with exponent imag no integer preceding decimal -->
				<expression>\b((0[bB][01]+)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- binary real : float with exponent imag no integer succeeding decimal -->
				<expression>\b((0[bB][01]+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- binary real : float imag normal -->
				<expression>\b((0[bB][01]+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- binary real : float imag no integer preceding decimal -->
				<expression>\b((0[bB][01]+)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- binary real : float imag no integer succeeding decimal -->
				<expression>\b((0[bB][01]+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.)[jJ]\b</expression>
			</zone>
			
			<zone name="literal.numeric.complex">
				<!-- octal real : integer imag -->
				<expression>\b((0[oO]?[0-7]+)(\s*([+-](\s[+-])?)+\s*)+)\d+[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- octal real : float with exponent imag normal -->
				<expression>\b((0[oO]?[0-7]+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- octal real : float with exponent imag no integer preceding decimal -->
				<expression>\b((0[oO]?[0-7]+)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- octal real : float with exponent imag no integer succeeding decimal -->
				<expression>\b((0[oO]?[0-7]+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- octal real : float imag normal -->
				<expression>\b((0[oO]?[0-7]+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- octal real : float imag no integer preceding decimal -->
				<expression>\b((0[oO]?[0-7]+)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- octal real : float imag no integer succeeding decimal -->
				<expression>\b((0[oO]?[0-7]+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.)[jJ]\b</expression>
			</zone>
			
			<zone name="literal.numeric.complex">
				<!-- hexadecimal real : integer imag -->
				<expression>\b((0[xX][a-fA-F0-9]+)(\s*([+-](\s[+-])?)+\s*)+)\d+[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- hexadecimal real : float with exponent imag normal -->
				<expression>\b((0[xX][a-fA-F0-9]+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- hexadecimal real : float with exponent imag no integer preceding decimal -->
				<expression>\b((0[xX][a-fA-F0-9]+)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- hexadecimal real : float with exponent imag no integer succeeding decimal -->
				<expression>\b((0[xX][a-fA-F0-9]+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- hexadecimal real : float imag normal -->
				<expression>\b((0[xX][a-fA-F0-9]+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- hexadecimal real : float imag no integer preceding decimal -->
				<expression>\b((0[xX][a-fA-F0-9]+)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- hexadecimal real : float imag no integer succeeding decimal -->
				<expression>\b((0[xX][a-fA-F0-9]+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.)[jJ]\b</expression>
			</zone>
			
			<zone name="literal.numeric.complex">
				<!-- float with exponent real normal : integer imag -->
				<expression>\b((\d+\.\d+[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+)[jJ]\b</expression>
			</zone>
			
			<zone name="literal.numeric.complex">
				<!-- float with exponent real normal : float with exponent imag normal -->
				<expression>\b((\d+\.\d+[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float with exponent real normal : float with exponent imag no integer preceding decimal -->
				<expression>\b((\d+\.\d+[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float with exponent real normal : float with exponent imag no integer succeeding decimal -->
				<expression>\b((\d+\.\d+[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float with exponent real no integer preceding decimal : float with exponent imag normal -->
				<expression>\b((\.\d+[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float with exponent real no integer preceding decimal : float with exponent imag no integer preceding decimal -->
				<expression>\b((\.\d+[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float with exponent real no integer preceding decimal : float with exponent imag no integer succeeding decimal -->
				<expression>\b((\.\d+[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float with exponent real no integer succeeding decimal : float with exponent imag normal -->
				<expression>\b((\d+\.[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float with exponent real no integer succeeding decimal : float with exponent imag no integer preceding decimal -->
				<expression>\b((\d+\.[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float with exponent real no integer succeeding decimal : float with exponent imag no integer succeeding decimal -->
				<expression>\b((\d+\.[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			
			<zone name="literal.numeric.complex">
				<!-- float with exponent real normal : float imag normal -->
				<expression>\b((\d+\.\d+[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float with exponent real normal : float imag no integer preceding decimal -->
				<expression>\b((\d+\.\d+[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float with exponent real normal : float imag no integer succeeding decimal -->
				<expression>\b((\d+\.\d+[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float with exponent real no integer preceding decimal : float imag normal -->
				<expression>\b((\.\d+[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float with exponent real no integer preceding decimal : float imag no integer preceding decimal -->
				<expression>\b((\.\d+[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float with exponent real no integer preceding decimal : float imag no integer succeeding decimal -->
				<expression>\b((\.\d+[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float with exponent real no integer succeeding decimal : float imag normal -->
				<expression>\b((\d+\.[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float with exponent real no integer succeeding decimal : float imag no integer preceding decimal -->
				<expression>\b((\d+\.[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float with exponent real no integer succeeding decimal : float imag no integer succeeding decimal -->
				<expression>\b((\d+\.[eE][+-]?\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.)[jJ]\b</expression>
			</zone>
			
			<zone name="literal.numeric.complex">
				<!-- float real normal : integer imag -->
				<expression>\b((\d+\.\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real normal : float with exponent imag normal -->
				<expression>\b((\d+\.\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real normal : float with exponent imag no integer preceding decimal -->
				<expression>\b((\d+\.\d+)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real normal : float with exponent imag no integer succeeding decimal -->
				<expression>\b((\d+\.\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real no integer preceding decimal : float with exponent imag normal -->
				<expression>\b((\.\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real no integer preceding decimal : float with exponent imag no integer preceding decimal -->
				<expression>\b((\.\d+)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real no integer preceding decimal : float with exponent imag no integer succeeding decimal -->
				<expression>\b((\.\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real no integer succeeding decimal : float with exponent imag normal -->
				<expression>\b((\d+\.)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real no integer succeeding decimal : float with exponent imag no integer preceding decimal -->
				<expression>\b((\d+\.)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real no integer succeeding decimal : float with exponent imag no integer succeeding decimal -->
				<expression>\b((\d+\.)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.[eE][+-]?\d+)[jJ]\b</expression>
			</zone>
			
			<zone name="literal.numeric.complex">
				<!-- float real normal : float imag normal -->
				<expression>\b((\d+\.\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real normal : float imag no integer preceding decimal -->
				<expression>\b((\d+\.\d+)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real normal : float imag no integer succeeding decimal -->
				<expression>\b((\d+\.\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real no integer preceding decimal : float imag normal -->
				<expression>\b((\.\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real no integer preceding decimal : float imag no integer preceding decimal -->
				<expression>\b((\.\d+)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real no integer preceding decimal : float imag no integer succeeding decimal -->
				<expression>\b((\.\d+)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real no integer succeeding decimal : float imag normal -->
				<expression>\b((\d+\.)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real no integer succeeding decimal : float imag no integer preceding decimal -->
				<expression>\b((\d+\.)(\s*([+-](\s[+-])?)+\s*)+)(\.\d+)[jJ]\b</expression>
			</zone>
			<zone name="literal.numeric.complex">
				<!-- float real no integer succeeding decimal : float imag no integer succeeding decimal -->
				<expression>\b((\d+\.)(\s*([+-](\s[+-])?)+\s*)+)(\d+\.)[jJ]\b</expression>
			</zone>
			
			<zone name="literal.numeric.float.with-exponent">
				<!-- normal float : integer preceding and succeeding the decimal -->
				<expression>\b\d+\.\d+[eE][+-]?\d+\b</expression>
			</zone>
			<zone name="literal.numeric.float.with-exponent">
				<!-- no integer preceding decimal -->
				<expression>\b\.\d+[eE][+-]?\d+\b</expression>
			</zone>
			<zone name="literal.numeric.float.with-exponent">
				<!-- no integer succeeding decimal -->
				<expression>\b\d+\.[eE][+-]?\d+\b</expression>
			</zone>
				
			<zone name="literal.numeric.float">
				<!-- normal float : integer preceding and succeeding the decimal -->
				<expression>\b(\d+\.\d+)\b</expression>
			</zone>
			<zone name="literal.numeric.float">
				<!-- no integer preceding decimal -->
				<expression>\b\d+\.\B</expression>
			</zone>
			<zone name="literal.numeric.float">
				<!-- no integer succeeding decimal -->
				<expression>\B\.\d+\b</expression>
			</zone>
			
			<!--
			<zone name="literal.numeric.exponent">
				<expression>(?:[0-9]+)e[0-9]+\b</expression>
			</zone>
			-->
			
			<zone name="literal.numeric.integer.binary.long">
				<expression>\b0[bB][01]+[lL]\b</expression>
			</zone>
			<zone name="literal.numeric.integer.binary">
				<expression>\b0[bB][01]+\b</expression>
			</zone>
			
			<zone name="literal.numeric.integer.octal.long">
				<expression>\b0[oO]?[0-7]+[lL]\b</expression>
			</zone>
			<zone name="literal.numeric.integer.octal">
				<expression>\b0[oO]?[0-7]+\b</expression>
			</zone>
			
			<zone name="literal.numeric.integer.hex.long">
				<expression>\b0[xX][\da-fA-F]+[lL]?\b</expression>
			</zone>
			<zone name="literal.numeric.integer.hex">
				<expression>\b0[xX][\da-fA-F]+\b</expression>
			</zone>
			
			<zone name="literal.numeric.integer.with-exponent">
				<expression>\b\d+[eE][+-]?\d+\b</expression>
			</zone>
			
			<zone name="literal.numeric.integer.decimal.long">
				<expression>\b(?:([1-9]\d*)|0)[lL]\b</expression>
			</zone>
			<zone name="literal.numeric.integer.decimal">
				<expression>\b(?:([1-9]\d*)|0)\b</expression>
			</zone>
		</collection>
		
		<!-- This doesn't seem to work very well. :[ -->
		<collection name="literal.collection">
			<zone name="literal.collection.array">
				<starts-with>
					<expression>(\[)</expression>
					<capture number="1" name="delimiter.balanced.square-brace.begin" />
				</starts-with>
				<ends-with>
					<expression>(\])</expression>
					<capture number="1" name="delimiter.balanced.square-brace.end" />
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
			
			<zone name="literal.collection.dictionary">
				<!-- Empty dictionary literal -->
				<expression>(\{)\s*(\})</expression>
				<capture number="1" name="delimiter.balanced.curly-brace.begin" />
				<capture number="2" name="delimiter.balanced.curly-brace.end" />
			</zone>
			
			<zone name="literal.collection.dictionary">
				<starts-with>
					<expression>(\{)(?=(([^:]+(?!("\s*)):)|))</expression>
					<capture number="1" name="delimiter.balanced.curly-brace.begin" />
				</starts-with>
				<ends-with>
					<expression>(\})</expression>
					<capture number="1" name="delimiter.balanced.curly-brace.end" />
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
			
			<!-- Apparently this shouldn't be in here, but I don't care! :) -->
			<zone name="literal.collection.tuple">
				<starts-with>
					<expression>(\()</expression>
					<capture number="1" name="delimiter.balanced.parenthesis.begin" />
				</starts-with>
				<ends-with>
					<expression>(\))</expression>
					<capture number="1" name="delimiter.balanced.parenthesis.end" />
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
			
			<!-- Doesn't work yet...
			<zone name="literal.collection.set">
				<starts-with>
					<expression>(\{)</expression>
					<capture number="1" name="delimiter.balanced.curly-brace.begin" />
				</starts-with>
				<ends-with>
					<expression>(\})</expression>
					<capture number="1" name="delimiter.balanced.curly-brace.end" />
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
			-->
		</collection>
		
		<collection name="literal.keyword">
			<zone name="literal.keyword.bool.true">
				<expression>\b(True)\b</expression>
			</zone>
			<zone name="literal.keyword.bool.false">
				<expression>\b(False)\b</expression>
			</zone>
			<zone name="literal.keyword.nothing">
				<expression>\b(None)\b</expression>
			</zone>
		</collection>
		
		<!-- This needs cleaning up...badly -->
		<!-- These are escape strings (like \n, \r, \t, \xhh, etc) -->
		<collection name="literal.escape">
			<!-- These are format string matches (like %s, %d, etc) -->
			<zone name="literal.escape.format">
				<expression>(%)(\(.+?\))?([ ]?[#]?[+]?[-]?[0]+[.]?\d+)([hlL]?[adiouxXeEfFgGcrs%])</expression>
				<capture number="1" name="begin" />
				<capture number="2" name="identity.name" />
				<capture number="3" name="modifiers" />
				<capture number="4" name="character" />
			</zone>
			
			<zone name="literal.escape.quote">
				<expression>(\\)(')|(\\)(")</expression>
				<capture number="1" name="begin" />
				<capture number="2" name="character" />
				<capture number="3" name="begin" />
				<capture number="4" name="character" />
			</zone>
			<zone name="literal.escape.bell">
				<expression>(\\)(a)</expression>
				<capture number="1" name="begin" />
				<capture number="2" name="character" />
			</zone>
			<zone name="literal.escape.backspace">
				<expression>(\\)(b)</expression>
				<capture number="1" name="begin" />
				<capture number="2" name="character" />
			</zone>
			<zone name="literal.escape.formfeed">
				<expression>(\\)(f)</expression>
				<capture number="1" name="begin" />
				<capture number="2" name="character" />
			</zone>
			<zone name="literal.escape.linebreak.windows">
				<expression>(\\)(r)(\\)(n)</expression>
				<capture number="1" name="begin" />
				<capture number="2" name="character" />
				<capture number="3" name="begin" />
				<capture number="4" name="character" />
			</zone>
			<zone name="literal.escape.linebreak.unix">
				<expression>(\\)(n)</expression>
				<capture number="1" name="begin" />
				<capture number="2" name="character" />
			</zone>
			<zone name="literal.escape.carriage-return">
				<expression>(\\)(r)</expression>
				<capture number="1" name="begin" />
				<capture number="2" name="character" />
			</zone>
			<zone name="literal.escape.unicode-name">
				<expression>(\\)(N)(\()([\w ]+)(\))</expression>
				<capture number="1" name="begin" />
				<capture number="2" name="character" />
				<capture number="3" name="identity.begin" />
				<capture number="4" name="identity.name" />
				<capture number="5" name="identity.end" />
			</zone>
			<zone name="literal.escape.tab">
				<expression>(\\)(t)</expression>
				<capture number="1" name="begin" />
				<capture number="2" name="character" />
			</zone>
			<zone name="literal.escape.unicode-16">
				<expression>(\\)(u)([a-fA-F0-9]{4})</expression>
				<capture number="1" name="begin" />
				<capture number="2" name="character" />
				<capture number="3" name="identity.hex" />
			</zone>
			<zone name="literal.escape.unicode-32">
				<expression>(\\)(U)([a-fA-F0-9]{8})</expression>
				<capture number="1" name="begin" />
				<capture number="2" name="character" />
				<capture number="3" name="identity.hex" />
			</zone>
			<zone name="literal.escape.vertical-tab">
				<expression>(\\)(v)</expression>
				<capture number="1" name="begin" />
				<capture number="2" name="character" />
			</zone>
			<zone name="literal.escape.octal">
				<expression>(\\)(([0-7]{3}))</expression>
				<capture number="1" name="begin" />
				<capture number="2" name="character" />
				<capture number="3" name="identity.octal" />
			</zone>
			<zone name="literal.escape.hex">
				<expression>(\\)(x)([a-fA-F0-9]{2})</expression>
				<capture number="1" name="begin" />
				<capture number="2" name="character" />
				<capture number="3" name="identity.hex" />
			</zone>
			<zone name="literal.escape.backslash">
				<expression>(\\)(\\)</expression>
				<capture number="1" name="begin" />
				<capture number="2" name="character" />
			</zone>
		</collection>
		
		<!--  
			===============
			  Identifiers 
			===============
		-->
		<collection name="identifier.function">
			<!-- Going against the standard here -->
			<zone name="identifier.function.builtin">
				<starts-with>
					<expression>(abs|all|any|apply|basestring|bool|buffer|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|min|next|object|oct|open|ord|pow|print|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip|__import__)\s*(\()</expression>
					<capture number="1" name="name" />
					<capture number="2" name="delimiter.balanced.parenthesis.begin" />
				</starts-with>
				<ends-with>
					<expression>(\))</expression>
					<capture number="1" name="delimiter.balanced.parenthesis.end" />
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
			
			<zone name="identifier.function">
				<starts-with>
					<expression>([a-zA-Z_]\w*)\s*(\()</expression>
					<capture number="1" name="name" />
					<capture number="2" name="delimiter.balanced.parenthesis.begin" />
				</starts-with>
				<ends-with>
					<expression>(\))</expression>
					<capture number="1" name="delimiter.balanced.parenthesis.end" />
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
		</collection>
		
		<collection name="identifier.decorator">
			<zone name="identifier.decorator.function.builtin">
				<expression>(@)((classmethod)|(staticmethod)|(property))</expression>
				<capture number="1" name="modifier" />
				<capture number="2" name="name" />
			</zone>
			
			<zone name="identifier.decorator.function">
				<starts-with>
					<expression>(@)([a-zA-Z_][\w.]*)(\()</expression>
					<capture number="1" name="modifier" />
					<capture number="2" name="name" />
					<capture number="3" name="delimiter.balanced.parenthesis.begin" />
				</starts-with>
				<ends-with>
					<expression>(\))\s*$</expression>
					<capture number="1" name="delimiter.balanced.parenthesis.end" />
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
			
			<zone name="identifier.decorator.function">
				<expression>(@)([a-zA-Z_]\w*)</expression>
				<capture number="1" name="modifier" />
				<capture number="2" name="name" />
			</zone>
			
			<zone name="identifier.decorator.class">
				<starts-with>
					<expression>(@)([a-zA-Z_]\w*)(\()</expression>
					<capture number="1" name="modifier" />
					<capture number="2" name="name" />
					<capture number="3" name="delimiter.balanced.parenthesis.begin" />
				</starts-with>
				<ends-with>
					<expression>(\))\s*$</expression>
					<capture number="1" name="delimiter.balanced.parenthesis.end" />
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
			
			<zone name="identifier.decorator.class">
				<expression>(@)([a-zA-Z_]\w*)</expression>
				<capture number="1" name="modifier" />
				<capture number="2" name="name" />
			</zone>
		</collection>
		
		<collection name="identifier.type">
			<zone name="identifier.type.basestring">
				<expression>\b(basestring)\b</expression>
			</zone>
			<zone name="identifier.type.bool">
				<expression>\b(bool)\b</expression>
			</zone>
			<zone name="identifier.type.int">
				<expression>\b(int)\b</expression>
			</zone>
			<zone name="identifier.type.float">
				<expression>\b(float)\b</expression>
			</zone>
			<zone name="identifier.type.long">
				<expression>\b(long)\b</expression>
			</zone>
			<zone name="identifier.type.complex">
				<expression>\b(complex)\b</expression>
			</zone>
			<zone name="identifier.type.str">
				<expression>\b(str)\b</expression>
			</zone>
			<zone name="identifier.type.unicode">
				<expression>\b(unicode)\b</expression>
			</zone>
			<zone name="identifier.type.list">
				<expression>\b(list)\b</expression>
			</zone>
			<zone name="identifier.type.tuple">
				<expression>\b(tuple)\b</expression>
			</zone>
			<zone name="identifier.type.buffer">
				<expression>\b(buffer)\b</expression>
			</zone>
			<zone name="identifier.type.range">
				<expression>\b(x?range)\b</expression>
			</zone>
			<zone name="identifier.type.set">
				<expression>\b(set)\b</expression>
			</zone>
			<zone name="identifier.type.frozenset">
				<expression>\b(frozenset)\b</expression>
			</zone>
			<zone name="identifier.type.dict">
				<expression>\b(dict)\b</expression>
			</zone>
			<zone name="identifier.type.file">
				<expression>\b(file)\b</expression>
			</zone>
			<zone name="identifier.type.object">
				<expression>\b(object)\b</expression>
			</zone>
		</collection>
		
		<collection name="identifier.variable">
			<!--
			<zone name="identifier.variable.constant">
			</zone>
			<zone name="identifier.variable.global">
			</zone>
			-->
			<zone name="identifier.variable.instance.instance">
				<expression>\b(self)\s*\.\s*([\w.]+)\b</expression>
				<capture number="1" name="type" />
				<capture number="2" name="variable" />
			</zone>
			<zone name="identifier.variable.instance.class">
				<expression>\b(cls|klass)\s*\.\s*([\w.])\b</expression>
				<capture number="1" name="type" />
				<capture number="2" name="variable" />
			</zone>
			<!--
			<zone name="identifier.variable.local">
			</zone>
			-->
		</collection>
		
		<collection name="identifier.variable.parameters">
			<zone name="identifier.variable.parameter">
				<expression>\b([a-zA-Z_][a-zA-Z_0-9]*)\s*(?:(?=(,))|(?=[\n\)]))</expression>
				<capture number="1" name="name" />
				<capture number="2" name="delimiter.separator.comma" />
			</zone>
			
			<zone name="identifier.variable.named-parameter">
				<starts-with>
					<expression>\b([a-zA-Z_][a-zA-Z_0-9]*)\s*(=)(?!=)</expression>
					<capture number="1" name="name"/>
					<capture number="2" name="keyword.operator.assignment" />
				</starts-with>
				<ends-with>
					<expression>\s*(?:(?=(,))|(?=$\n?|[):]))</expression>
					<capture number="1" name="delimiter.separator.comma" />
				</ends-with>
				<subzones>
					<zone name="value">
						<expression>.+</expression>
						<subzones>
							<include collection="language" />
						</subzones>
					</zone>
				</subzones>
			</zone>
		</collection>
		
		<!--  
			============
			  Keywords  
			============
		-->
		<collection name="keyword">
			<zone name="keyword.control.import.from">
				<expression>\b(from)\b</expression>
			</zone>
			<zone name="keyword.control.import.import">
				<!-- not catching wildcard? -->
				<expression>\b(import)\b</expression>
				<capture number="2" name="wildcard" />
			</zone>
			
			<zone name="keyword.control.exception.try">
				<expression>\b(try)\b</expression>
			</zone>
			<zone name="keyword.control.exception.except">
				<expression>\b(except)\b</expression>
			</zone>
			<zone name="keyword.control.exception.raise">
				<expression>\b(raise)\b</expression>
			</zone>
			<zone name="keyword.control.exception.finally">
				<expression>\b(finally)\b</expression>
			</zone>
			
			<zone name="keyword.control.flow.for">
				<expression>\b(for)\b</expression>
			</zone>
			<zone name="keyword.control.flow.while">
				<expression>\b(while)\b</expression>
			</zone>
			<zone name="keyword.control.flow.if">
				<expression>\b(if)\b</expression>
			</zone>
			<zone name="keyword.control.flow.elif">
				<expression>\b(elif)\b</expression>
			</zone>
			<zone name="keyword.control.flow.else">
				<expression>\b(else)\b</expression>
			</zone>
			<zone name="keyword.control.flow.with">
				<expression>\b(with)\b</expression>
			</zone>
			
			<zone name="keyword.control.flow.inside.break">
				<expression>\b(break)\b</expression>
			</zone>
			<zone name="keyword.control.flow.inside.continue">
				<expression>\b(continue)\b</expression>
			</zone>
			<zone name="keyword.control.flow.inside.pass">
				<expression>\b(pass)\b</expression>
			</zone>
			<zone name="keyword.control.flow.inside.return">
				<expression>\b(return)\b</expression>
			</zone>
			<zone name="keyword.control.flow.inside.yield">
				<expression>\b(yield)\b</expression>
			</zone>
			
			<zone name="keyword.modifier.scope.global">
				<expression>\b(global)\b</expression>
			</zone>
			<zone name="keyword.modifier.scope.nonlocal">
				<expression>\b(nonlocal)\b</expression>
			</zone>
			
			<zone name="keyword.modifier.other.as">
				<expression>\b(as)\b</expression>
			</zone>
			<zone name="keyword.modifier.other.assert">
				<expression>\b(assert)\b</expression>
			</zone>
			<zone name="keyword.modifier.other.del">
				<expression>\b(del)\b</expression>
			</zone>
			<zone name="keyword.modifier.other.exec">
				<expression>\b(exec)\b</expression>
			</zone>
			<zone name="keyword.modifier.other.print">
				<expression>\b(print)\b</expression>
			</zone>
			
			<zone name="keyword.definition.class">
				<expression>\b(class)\b</expression>
			</zone>
			<zone name="keyword.definition.function">
				<expression>\b(def)\b</expression>
			</zone>
			<zone name="keyword.definition.lambda">
				<expression>\b(lambda)\b</expression>
			</zone>
		</collection>
		
		<!--  
			==============
			  Containers  
			==============
		-->
		<collection name="container.class">
			<zone name="container.class">
				<starts-with>
					<expression>^(\s*)(class)\s+([a-zA-Z_]\w*)\s*((\().*?(\)))?\s*(:)\s*</expression>
					<capture number="1" name="whitespace" />
					<capture number="2" name="keyword.definition.class" />
					<capture number="3" name="name" />
					<capture number="4" name="container.parameters">
						<subzones>
							<include collection="identifier.variable.parameters" />
						</subzones>
					</capture>
					<capture number="5" name="delimited.balanced.parenthesis.begin" />
					<capture number="6" name="delimited.balanced.parenthesis.end" />
					<capture number="7" name="delimiter.block.begin" />
				</starts-with>
				<ends-with>
					<expression>((?:^\1(?:$|(?=[^\s])))|^$)</expression>
					<capture number="1" name="delimiter.container.end.class" />
					<capture number="2" name="whitespace" />
					<capture number="3" name="delimiter.terminator" />
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
		</collection>
		
		<collection name="container.function">
			<zone name="container.function">
				<starts-with>
					<expression>^(\s*)(def)\s+([a-zA-Z_]\w*)((\().*?(\)))\s*(:)\s*$</expression>
					<capture number="1" name="whitespace" />
					<capture number="2" name="keyword.definition.function" />
					<capture number="3" name="name" />
					<capture number="4" name="container.parameters">
						<subzones>
							<include collection="identifier.variable.parameters" />
						</subzones>
					</capture>
					<capture number="5" name="delimited.balanced.parenthesis.begin" />
					<capture number="6" name="delimited.balanced.parenthesis.end" />
					<capture number="7" name="delimiter.block.begin" />
				</starts-with>
				<ends-with>
					<expression>((?:^\1(?:$|(?=[^\s])))|^$)</expression>
					<capture number="1" name="delimiter.container.end.function" />
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
		</collection>
		
		<collection name="container.block">
			<zone name="container.block">
				<subzones>
					<include collection="container.statement" />
				</subzones>
			</zone>
		</collection>
		
		<!--
		<collection name="container.expression">
			<zone name="container.expression">
			</zone>
		</collection>
		-->
		<collection name="container.statement">
		<!--
			<zone name="container.statement.definition.class">
				<starts-with>
					<expression>(class)\s+([a-zA-Z_]\w*)\s*</expression>
					<capture number="1" name="keyword.definition.class" />
					<capture number="2" name="name" />
				</starts-with>
				<ends-with>
					<expression>\s*(:)\s*</expression>
					<capture number="1" name="delimiter.container.begin.class" />
				</ends-with>
				<subzones>
					<zone name="container.parameters">
						<starts-with>
							<expression>(\()</expression>
							<capture number="1" name="delimiter.balanced.parenthesis.begin" />
						</starts-with>
						<ends-with>
							<expression>(?=(\))\s*:)</expression>
							<capture number="1" name="delimiter.balanced.parenthesis.end" />
						</ends-with>
						<subzones>
							<include collection="identifier.variable.parameters" />
						</subzones>
					</zone>
				</subzones>
			</zone>
			
			<zone name="container.statement.definition.function">
				<starts-with>
					<expression>(def)\s+([a-zA-Z_]\w*)\s*</expression>
					<capture number="1" name="keyword.definition.function" />
					<capture number="2" name="name" />
				</starts-with>
				<ends-with>
					<expression>\s*(:)\s*</expression>
					<capture number="1" name="delimiter.container.begin.function" />
				</ends-with>
				<subzones>
					<zone name="container.parameters">
						<starts-with>
							<expression>(\()</expression>
							<capture number="1" name="delimiter.balanced.parenthesis.begin" />
						</starts-with>
						<ends-with>
							<expression>(?=(\))\s*:)</expression>
							<capture number="1" name="delimiter.balanced.parenthesis.end" />
						</ends-with>
						<subzones>
							<include collection="identifier.variable.parameters" />
						</subzones>
					</zone>
				</subzones>
			</zone>
			-->
			<zone name="container.statement.definition.block">
				<starts-with>
					<expression>(lambda)(?=\s+)</expression>
					<capture number="1" name="keyword.definition.function" />
				</starts-with>
				<ends-with>
					<expression>(:)</expression>
					<capture number="1" name="delimiter.container.begin.function" />
				</ends-with>
				<subzones>
					<zone name="container.parameters">
						<starts-with>
							<expression>\s+</expression>
						</starts-with>
						<ends-with>
							<expression>(?=:)</expression>
						</ends-with>
						<subzones>
							<!-- These are slightly different for lambdas -->
							<zone name="identifier.variable.parameter">
								<expression>\b([a-zA-Z_][a-zA-Z_0-9]*)\s*(?:(,)|(?=:))</expression>
								<capture number="1" name="name" />
								<capture number="2" name="delimiter.separator.comma" />
							</zone>
							
							<zone name="identifier.variable.named-parameter">
				                <starts-with>
				                    <expression>\b([a-zA-Z_][a-zA-Z_0-9]*)\s*(=)(?!=)</expression>
				                    <capture number="1" name="name"/>
				                    <capture number="2" name="keyword.operator.assignment" />
				                </starts-with>
				                <ends-with>
				                    <expression>\s*(?:(?=(,))|(?=:))</expression>
				                    <capture number="1" name="delimiter.separator.comma" />
				                </ends-with>
				                <subzones>
				                    <include collection="language" />
				                </subzones>
				            </zone>
						</subzones>
					</zone>
				</subzones>
			</zone>
			
			<zone name="container.statement.import.from">
				<expression>^\s*(from)\s+([a-zA-Z_.][\w.]*)+\s+(import)\s+((?:[a-zA-Z_]\w*)|(?:\*))(\s+(as)\s+([a-zA-Z_]\w*))?\s*</expression>
				<capture number="1" name="keyword.control.import.from" />
				<capture number="2" name="module" />
				<capture number="3" name="keyword.control.import.import" />
				<capture number="4" name="item" />
				<capture number="6" name="keyword.modifier.as" />
				<capture number="7" name="name" />
			</zone>
			
			<zone name="container.statement.import.import">
				<expression>^\s*(import)\s+([a-zA-Z_.][\w.]*)(\s+(as)\s+([a-zA-Z_]\w*))?\s*</expression>
				<capture number="1" name="keyword.control.import.import" />
				<capture number="2" name="module" />
				<capture number="4" name="keyword.modifier.as" />
				<capture number="5" name="name" />
			</zone>
			
			<zone name="container.statement.control.flow.if">
				<!-- Very naive. Should be expanded. -->
				<starts-with>
					<expression>^\s*(if)\s+(?=[\w()]+)</expression>
					<capture number="1" name="keyword.control.flow.if" />
				</starts-with>
				<ends-with>
					<expression>:\s*$</expression>
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
			
			<zone name="container.statement.control.flow.elif">
				<!-- Very naive. Should be expanded. -->
				<starts-with>
					<expression>^\s*(elif)\s+(?=[\w()]+)</expression>
					<capture number="1" name="keyword.control.flow.elif" />
				</starts-with>
				<ends-with>
					<expression>:\s*$</expression>
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
			
			<zone name="container.statement.control.flow.else">
				<expression>^\s*(else)\s*:\s*</expression>
				<capture number="1" name="keyword.control.flow.else" />
			</zone>
			
			<zone name="container.statement.control.flow.while">
				<starts-with>
					<expression>^\s*(while)\s+(?=[\w()]+)</expression>
					<capture number="1" name="keyword.control.flow.while" />
				</starts-with>
				<ends-with>
					<expression>:\s*$</expression>
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
			
			<zone name="container.statement.control.flow.for">
				<starts-with>
					<expression>^\s*(for)\s+(?=[\w()]+)</expression>
					<capture number="1" name="keyword.control.flow.for" />
				</starts-with>
				<ends-with>
					<expression>:\s*$</expression>
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
			
			<zone name="container.statement.control.flow.with.as">
				<expression>^\s*(with)\s+([\w()]+?)\s+(as)\s+([\w()]+)\s*(:)\s*</expression>
				<capture number="1" name="keyword.control.flow.with" />
				<capture number="2" name="input">
					<subzones>
						<include collection="language" />
					</subzones>
				</capture>
				<capture number="3" name="keyword.control.other.as" />
				<capture number="4" name="name">
					<subzones>
						<include collection="language" />
					</subzones>
				</capture>
			</zone>
			
			<zone name="container.statement.control.flow.with">
				<starts-with>
					<expression>^\s*(with)\s+(?=[\w()]+)</expression>
					<capture number="1" name="keyword.control.flow.with" />
				</starts-with>
				<ends-with>
					<expression>:\s*$</expression>
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
			
			<zone name="container.statement.exception.try">
				<expression>^\s*(try)\s*:\s*</expression>
				<capture number="1" name="keyword.control.exception.try" />
			</zone>
			
			<zone name="container.statement.exception.except">
				<starts-with>
					<expression>^\s*(except)\s+(?=[\w()]+)</expression>
					<capture number="1" name="keyword.control.flow.except" />
				</starts-with>
				<ends-with>
					<expression>:\s*$</expression>
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
			
			<zone name="container.statement.exception.finally">
				<expression>^\s*(finally)\s*:\s*</expression>
				<capture number="1" name="keyword.control.exception.finally" />
			</zone>
			
			<zone name="container.statement.exception.raise">
				<starts-with>
					<expression>^\s*(raise)\s+(?=[\w()]+)</expression>
					<capture number="1" name="keyword.control.flow.raise" />
				</starts-with>
				<ends-with>
					<expression>\s*$</expression>
				</ends-with>
				<subzones>
					<include collection="language" />
				</subzones>
			</zone>
		</collection>
		
		<!--  
			============
			  Metadata  
			============
		-->
		<!-- Finish me when Python method signatures are figured out -->
		<!--
		<collection name="metadata.type-signature">
			<zone name="metadata.type-signature">
			</zone>
		</collection>
		-->
		
		<collection name="metadata.processing">
			<zone name="metadata.processing.comment.encoding">
				<expression>^#(?:.*?)coding[:=]\s*([-\w.]+)</expression>
				<capture number="1" name="encoding" />
			</zone>
			<zone name="metadata.processing.comment.shebang">
				<expression>^#!(/[\w/ ]+python)</expression>
				<capture number="1" name="path" />
			</zone>
		</collection>
		
		<collection name="metadata.comment">
			<zone name="metadata.comment.line">
				<starts-with>
					<expression>#</expression>
				</starts-with>
				<ends-with>
					<expression>\n\Z</expression>
				</ends-with>
			</zone>
			
			<!-- No true block comments in Python! -->
			<zone name="metadata.comment.block">
			</zone>
			
			<zone name="metadata.comment.documentation">
				<starts-with>
					<expression>(('|"){3})</expression>
					<capture number="1" name="begin" />
				</starts-with>
				<ends-with>
					<expression>\1</expression>
					<capture number="0" name="end" />
				</ends-with>
				<subzones>
					<include collection="literal.escape" />
				</subzones>
			</zone>
		</collection>
		
		<!--  
			=============
			  Operators  
			=============
		-->
		<collection name="operator">
			<!-- Some of these look awful due to XML character encoding, so I added in comments what it catches without XML character encoding. -->
			
			<!-- These need to be up here to match before >= and <= do -->
			<zone name="operator.accessor.bit-shift.right">
				<!-- >>= -->
				<expression>&gt;&gt;=</expression>
			</zone>
			<zone name="operator.accessor.bit-shift.left">
				<!-- <<= -->
				<expression>&lt;&lt;=</expression>
			</zone>
			
			<zone name="operator.comparator.not-equal">
				<!-- (<>)|(!=) -->
				<expression>(&lt;&gt;)|(!=)</expression>
			</zone>
			<zone name="operator.comparator.less-than-or-equal">
				<!-- (?<!(<))<= -->
				<expression>&lt;=</expression>
			</zone>
			<zone name="operator.comparator.greater-than-or-equal">
				<!-- (?<!(>))>= -->
				<expression>&gt;=</expression>
			</zone>
			<zone name="operator.comparator.less-than">
				<!-- <(?!(<)) -->
				<expression>&lt;(?!(&lt;))</expression>
			</zone>
			<zone name="operator.comparator.greater-than">
				<!-- >(?!(>)) -->
				<expression>&gt;(?!(&gt;))</expression>
			</zone>
			<zone name="operator.comparator.equal">
				<expression>==</expression>
			</zone>
			
			<zone name="operator.accessor.add">
				<expression>\+=</expression>
			</zone>
			<zone name="operator.accessor.subtract">
				<expression>-=</expression>
			</zone>
			<zone name="operator.accessor.power">
				<expression>\*\*=</expression>
			</zone>
			<zone name="operator.accessor.multiply">
				<expression>\*=</expression>
			</zone>
			<zone name="operator.accessor.divide">
				<expression>//=|/=</expression>
			</zone>
			<zone name="operator.accessor.modulus">
				<expression>%=</expression>
			</zone>
			<zone name="operator.accessor.and">
				<!-- &= -->
				<expression>&amp;=</expression>
			</zone>
			<zone name="operator.accessor.or">
				<expression>\|=</expression>
			</zone>
			<zone name="operator.accessor.xor">
				<expression>\^=</expression>
			</zone>
			<zone name="operator.accessor.assign">
				<!-- This is not technically an operator in Python, but it makes the most sense to keep it in this class regardless. -->
				<expression>=</expression>
			</zone>
			
			<zone name="operator.mathematical.add">
				<expression>\+</expression>
			</zone>
			<zone name="operator.mathematical.subtract">
				<expression>-</expression>
			</zone>
			<zone name="operator.mathematical.power">
				<expression>\*\*</expression>
			</zone>
			<zone name="operator.mathematical.multiply">
				<expression>\*</expression>
			</zone>
			<zone name="operator.mathematical.divide">
				<expression>//|/</expression>
			</zone>
			<zone name="operator.mathematical.modulus">
				<expression>%</expression>
			</zone>
			<zone name="operator.mathematical.bit-shift.right">
				<!-- >> -->
				<expression>&gt;&gt;</expression>
			</zone>
			<zone name="operator.mathematical.bit-shift.left">
				<!-- << -->
				<expression>&lt;&lt;</expression>
			</zone>
			
			<zone name="operator.logical.bitwise.and">
				<!-- & -->
				<expression>&amp;</expression>
			</zone>
			<zone name="operator.logical.bitwise.or">
				<expression>\|</expression>
			</zone>
			<zone name="operator.logical.bitwise.xor">
				<expression>\^</expression>
			</zone>
			<zone name="operator.logical.bitwise.not">
				<expression>~</expression>
			</zone>
			<zone name="operator.logical.test.and">
				<expression>\b(and)\b</expression>
			</zone>
			<zone name="operator.logical.test.or">
				<expression>\b(or)\b</expression>
			</zone>
			<zone name="operator.logical.test.not">
				<expression>\b(not)\b</expression>
			</zone>
			<zone name="operator.logical.test.is">
				<expression>\b(is)\b</expression>
			</zone>
			<zone name="operator.logical.test.in">
				<expression>\b(in)\b</expression>
			</zone>
		</collection>
		
		<!--  
			==============
			  Delimiters  
			==============
		-->
		<collection name="delimiter">
			<zone name="delimiter.terminator">
				<expression>;</expression>
			</zone>
			
			<zone name="delimiter.separator.comma">
				<expression>,</expression>
			</zone>
			<zone name="delimiter.separator.pairing">
				<expression>:</expression>
			</zone>
			<zone name="delimiter.separator.namespace">
				<expression>\.</expression>
			</zone>
			
			<zone name="delimiter.balanced.quote.double">
				<expression>"</expression>
			</zone>
			<zone name="delimiter.balanced.quote.single">
				<expression>'</expression>
			</zone>
			<zone name="delimiter.balanced.quote.backtick">
				<expression>`</expression>
			</zone>
			<zone name="delimiter.balanced.parenthesis.begin">
				<expression>\(</expression>
			</zone>
			<zone name="delimiter.balanced.parenthesis.end">
				<expression>\)</expression>
			</zone>
			<zone name="delimiter.balanced.square-brace.begin">
				<expression>\[</expression>
			</zone>
			<zone name="delimiter.balanced.square-brace.end">
				<expression>\]</expression>
			</zone>
			<zone name="delimiter.balanced.curly-brace.begin">
				<expression>\{</expression>
			</zone>
			<zone name="delimiter.balanced.curly-brace.end">
				<expression>\}</expression>
			</zone>
		</collection>
	</library>
</syntax>